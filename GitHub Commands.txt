Configuring Git:-
---------------
      1. git config --global user.name "My Name"
      2. git config --global user.email. "someone@email.com"
      3. git config --list

Work flow:-
----------
Local Git:
---------
      1. Github repo
      2. clone
      3. Changes
      4. add
      5. commit
      6. push

Add & Commit:-
------------
      1. add - adds new or changed files in your working direcotry to the Git staging area.
      syntax : git add <- file name ->

      2. commit - it is the record of change
      syntax : git commit -m "some message"

Cone & Status:-
-------------
      1. Clone - Cloning a repository on our local machine
      syntax : git clone <- some link ->

      2. status - displays the state of the code
      syntax : git status

Push Command:-
-------------
      1. push - upload local repo content to remote repo
      syntax : git push origin main

Init Command:-
------------
      1. init - used to create a new git repo
      2. git init
      3. git remote add origin <- link ->
      4. git remote -v ( to verity remote)
      5. git branch      ( to check branch)
      6. git branch -M main ( to rename branch)
      7. git push origin main

Branch Commands:-
---------------
      1. git branch ( to check branch)
      2. git branch -M main ( to rename branch)
      3. git checkout <- branch name -> ( to navigate)
      4. git checkout -b <- new branch name -> ( to create new branch)
      5. git branch -d <- branch name ->  (to delete branch)

Pull Command:-
-------------
      1. git pull origin main
      used to fetch and download content from a remote repo and immediately update the local repo to match that content.

Merging code:-
------------
Way-1:
-----
      1. git diff <- branch name ->        (to compare commits, branches, files & more)
      2. git merge <- branch name ->       (to merge 2 branches)
Way-2:
-----
      1. Create PR

Log command:-
-----------
      1. git log    (to view history of commits)

Undoing Changes:-
----------------
      Case 1:  staged changes
            git reset <- file name ->
            git reset 
      Case 2: commit changes (for one commit)
            git reset HEAD~1
      Case 3: committed changes ( for many commits)
            git reset <- commit hash ->
            git reset --hard <-commit hash->
